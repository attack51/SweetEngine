#version 450
layout (local_size_x = 128, local_size_y = 1) in;
//ie)gl_NumWorkGroups 10 local_size 2, gl_LocalInvocationID 0~1 gl_WorkGroupID 0~5

precision highp int;
precision highp float;

struct skinnedVert
{
	vec4 pos;
	vec4 nor;
	uint packed_bone_indices;
	float bone_weights[3];
};

struct animatedVert
{
	vec4 pos;
	vec4 nor;
};

layout (std140, binding = 0) readonly uniform computeUB
{
    uint boneCount;
	uint vertCount;
	uint outVertexOffset;
} inComputeUB;

//https://www.khronos.org/opengl/wiki/Interface_Block_(GLSL)
//std140 : always rounded up to the size of a vec4 (ie: 16-bytes)
//std430 : they are no longer rounded up to a multiple of 16 bytes
layout(std430, binding = 1000) readonly buffer skinnedVertRB
{
	skinnedVert inVertices[];
} inSkinnedVertRB;

layout(std140, binding = 1001) readonly buffer animMatrixRB
{
	mat3x4 inAnimMats[];
} inAnimMatrixRB;

layout(std140, binding = 1002) writeonly buffer animVertWB
{
	animatedVert outVertices[];
} outAnimVertWB;

uvec3 Unpack_UIntToUVec3(uint packed)
{
	uvec3 shift = uvec3(0, 8, 16);
	uint mask = 0xff;

	uvec3 result = (packed.xxx >> shift) & mask.xxx;
	return result;
}

uvec4 Unpack_UIntToUVec4(uint packed)
{
	uvec4 shift = uvec4(0, 8, 16, 24);
	uint mask = 0xff;

	uvec4 result = (packed.xxxx >> shift) & mask.xxxx;
	return result;
}

void Skinning(	in vec4 inPos,
				in vec4 inNor,
				in uvec3 inBone_indices,
				in float inBone_weights[3],
				out vec4 outPos,
				out vec4 outNor)
{
	outPos = vec4(0,0,0,1);
	outNor = vec4(0,0,0,0);

	mat3x4 animMatrix;
	float totalWeight = 0.0f;

	for (uint i = 0; i < 3; ++i)
	{
		animMatrix = inAnimMatrixRB.inAnimMats[inBone_indices[i]];
		outPos.xyz += (inPos * animMatrix) * inBone_weights[i];
		outNor.xyz += (inNor * animMatrix) * inBone_weights[i];

		totalWeight += inBone_weights[i];
	}

	//no function any (maybe is for bvec)
	//bool animated = any(inBone_weights);
	//outPos = animated ? outPos : inPos;
	//outNor = animated ? outNor : inNor;
}

void main()
{
	const uint originalId = gl_GlobalInvocationID.x;
	if(originalId >= inComputeUB.vertCount) return;

	uint crowdId = gl_GlobalInvocationID.y;

	uint id = originalId + crowdId * gl_NumWorkGroups.x;
	uint crowdBoneOffset = crowdId * inComputeUB.boneCount;
	uint outId = id + inComputeUB.outVertexOffset;

	skinnedVert inVert = inSkinnedVertRB.inVertices[originalId];
	
	vec4 outPos;
	vec4 outNor;
	uvec3 bone_indices = Unpack_UIntToUVec3(inVert.packed_bone_indices) + crowdBoneOffset.xxx;
	Skinning(
			inVert.pos,
			inVert.nor,
			bone_indices,
			inVert.bone_weights,
			outPos,
			outNor);
	
	outAnimVertWB.outVertices[outId].pos = outPos;
	outAnimVertWB.outVertices[outId].nor = outNor;
}
