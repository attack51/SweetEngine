#pragma once

//General Include
#include "General/SHeader.h"
#include "General/SString.h"

//C++ Include
#include <vector>

namespace STextureLoader
{

SResult LoadFromASTC(
    const CString& fileName,
    vector<uint8_t>& data,
    uint32_t& width,
    uint32_t& height,
    uint8_t& blockDimX,
    uint8_t& blockDimY);

SResult LoadFromPNG(
    const CString& fileName,
    vector<uint8_t>& data,
    uint32_t& width,
    uint32_t& height);

SResult LoadPacked(
    const CString& fileName,
    uint32_t startMipLevel,
    uint32_t maxMipLevelCount,
    vector<uint8_t>& data,
    vector<uint32_t>& mipmapDataOffset,
    vector<uint32_t>& mipmapDataSize,
    uint32_t& width,
    uint32_t& height,
    SFormat& format);

/// Header for the on-disk format generated by astcenc.
struct SAstcHeader
{
    /// Magic value
    uint8_t magic[4];
    /// Block size in X
    uint8_t blockdimX;
    /// Block size in Y
    uint8_t blockdimY;
    /// Block size in Z
    uint8_t blockdimZ;
    /// Size of the image in pixels (X), least significant byte first.
    uint8_t xsize[3];
    /// Size of the image in pixels (Y), least significant byte first.
    uint8_t ysize[3];
    /// Size of the image in pixels (Z), least significant byte first.
    uint8_t zsize[3];
};
static_assert(sizeof(SAstcHeader) == 16, "Packed ASTC header struct is not 16 bytes.");

#define ASTC_MAGIC 0x5CA1AB13

}//End namespace STextureLoader
